'''
This script does the following:

1. Downloads a small repository of known bad stuff (14 bad things) and
    saves to temporary directory. The ransomware folder from the
    https://github.com/Endermanch/MalwareDatabase/ repo.
2. Unzips the samples into the correct directory for the environment
   (malware_rl/envs/utils/samples).
3. Renames each sample to its corresponding SHA256 hash.
4. Removes temporary malware directory
'''

import zipfile
import os
import glob
import sys
import hashlib
import argparse
import shutil

# Third Part Libraries
import svn.remote

MODULE_PATH = os.path.split(os.path.abspath(sys.modules[__name__].__file__))[0]
SAMPLE_PATH = os.path.join(MODULE_PATH, 'malware_rl/envs/utils/samples/')
ZIP_PASSWORD = "mysubsarethebest"
DEFAULT_MALWARE_REPO = 'https://github.com/Endermanch/MalwareDatabase/trunk/ransomwares'
TEMP_SAMPLE_PATH = 'ransomwares/'

def download_specific_git_repo_directory(temp_path=None, source_repo=None):
    '''
    Downloads a specific directory within a git repo.
    '''
    if os.path.exists(temp_path) is False:
        repo = svn.remote.RemoteClient(source_repo)

        try:
            repo.checkout(source_repo)
            print('[+] Success - Samples Downloaded & Placed into Temp Directory')

        except svn.exception.SvnException:
            print('''
            Subversion not found. In order to download the sample malware, Subversion (svn) needs to be installed. 
            This provides a method of downloading only the target folder rather than the whole repo.
            ''')

def unzip_samples(temp_sample_path=None, sample_path=None):
    '''
    Unzips all .zip's within the target directory
    '''
    if os.path.exists(temp_sample_path):
        target_path_contents = glob.glob(os.path.join(os.getcwd(), temp_sample_path + '*.zip'))
        for file_name in target_path_contents:
            try:
                with zipfile.ZipFile(file_name, 'r') as file:
                    file.extractall(sample_path, pwd=bytes(ZIP_PASSWORD, 'utf-8'))
            except:
                continue
    print('[+] Success - Samples Unzipped')

def rename_samples_to_sha256_hash(sample_path=None):
    '''
    Renames all .exe's within a target directory to there
    SHA256 hash
    '''
    for files in glob.glob(os.path.join(sample_path, '*.exe')):
        sha256_hash = hashlib.sha256()
        with open(files, "rb") as file:
            for byte_block in iter(lambda: file.read(4096), b""):
                sha256_hash.update(byte_block)
            computed_hash = sha256_hash.hexdigest()
            os.rename(files, os.path.join(sample_path, computed_hash))
    print('[+] Success - Samples renamed to their SHA256 hash')

def clean_up_temp_samples_dir(directory_to_remove=None):
    '''
    Clean up temporary samples directory
    '''
    if os.path.exists(directory_to_remove):
        shutil.rmtree(directory_to_remove)
        print(f'[+] Cleanup Complete - {directory_to_remove} has been removed ')

def check_if_samples_exist(directory_to_check=None):
    '''
    Checks if samples directory contains samples
    '''
    if len(os.listdir(directory_to_check)) == 0:
        return True
    else:
        return False


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--accept',
                        help='accept liability for downloading bad things',
                        required=True, action="store_true")
    parser.add_argument('--force',
                        help='forces the download even if samples directory is not empty',
                        action="store_true")
    args = parser.parse_args()

    if args.accept:
        if check_if_samples_exist(directory_to_check=SAMPLE_PATH) | args.force == True:
            download_specific_git_repo_directory(temp_path=TEMP_SAMPLE_PATH,
                                                 source_repo=DEFAULT_MALWARE_REPO)
            unzip_samples(temp_sample_path=TEMP_SAMPLE_PATH, sample_path=SAMPLE_PATH)
            rename_samples_to_sha256_hash(sample_path=SAMPLE_PATH)
            clean_up_temp_samples_dir(directory_to_remove=TEMP_SAMPLE_PATH)

        else:
            print('[-] It looks like there is something in your samples \
            directory already, aborting download. use the --force flag to continue download')
    else:
        print('In order to use this script, you must accept liability for downloading bad things!')
